version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=${CORS_ORIGIN}
      - MAX_FILE_SIZE=10485760
      - UPLOAD_DIR=/app/uploads
      - FILE_ENCRYPTION_KEY=${FILE_ENCRYPTION_KEY}
      - JOB_RETENTION_DAYS=7
      - MAX_CONCURRENT_JOBS=5
      - LOG_LEVEL=debug
      - YTDLP_COOKIES_PATH=/app/cookies/cookies.txt
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=100
      - SENSITIVE_RATE_LIMIT_WINDOW=15
      - SENSITIVE_RATE_LIMIT_MAX=10
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - STORAGE_TYPE=local
      - STORAGE_PATH=/app/uploads
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - MAX_SCREENSHOTS=10
      - SCREENSHOT_INTERVAL=60
      - FILE_EXPIRATION_DAYS=7
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads:rw
      - ./backend/cookies:/app/cookies:ro
    command: npm run dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
      - "9222:9222" # Debug port
    environment:
      - NODE_ENV=development
      - VITE_API_URL=${API_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local 