// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum JobType {
  FILE
  YOUTUBE
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  jobs          Job[]
  shareableLinks ShareableLink[]
  accessTokens  AccessToken[]
  apiKeys       ApiKey[]
  webhooks      Webhook[]
  apiUsage      ApiUsage[]
  errorLogs     ErrorLog[]
  userBehavior  UserBehavior[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model Job {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  status      JobStatus @default(PENDING)
  inputPath   String
  outputPath  String?
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shareableLinks ShareableLink[]
  metadata    Json?
  sessionId   String?
  webhookUrl  String?
  type        JobType
  screenshots String[]
  videoUrl    String?
  resultUrl   String?
}

model ShareableLink {
  id          String   @id @default(uuid())
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id])
  token       String   @unique
  expiresAt   DateTime?
  maxUses     Int?
  useCount    Int       @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  user        User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@index([jobId])
  @@index([createdBy])
}

model AccessToken {
  id          String   @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String   @unique
  name        String
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  permissions Json     @default("{}")

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String
  key         String    @unique
  permissions Json
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Webhook {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  url         String
  events      String[]
  secret      String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deliveries  WebhookDelivery[]
}

model WebhookDelivery {
  id          String    @id @default(uuid())
  webhookId   String
  webhook     Webhook   @relation(fields: [webhookId], references: [id])
  event       String
  status      String
  response    String?
  error       String?
  createdAt   DateTime  @default(now())
}

model ApiUsage {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  endpoint    String
  method      String
  statusCode  Int
  duration    Int
  createdAt   DateTime  @default(now())
}

model ErrorLog {
  id          String    @id @default(uuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  message     String
  stack       String
  endpoint    String?
  method      String?
  requestId   String?
  metadata    Json?
  createdAt   DateTime  @default(now())
}

model PerformanceMetric {
  id          String    @id @default(uuid())
  metric      String
  value       Float
  tags        Json?
  createdAt   DateTime  @default(now())
}

model UserBehavior {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  action      String
  metadata    Json?
  createdAt   DateTime  @default(now())
}
